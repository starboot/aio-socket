/*
 *    Copyright 2019 The aio-socket Project
 *
 *    The aio-socket Project Licenses this file to you under the Apache License,
 *    Version 2.0 (the "License"); you may not use this file except in compliance
 *    with the License. You may obtain a copy of the License at:
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package cn.starboot.socket.core.udp;

import cn.starboot.socket.core.AbstractBootstrap;
import cn.starboot.socket.core.jdk.nio.NioEventLoopWorker;
import cn.starboot.socket.core.spi.KernelBootstrapProvider;
import cn.starboot.socket.core.AioConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.DatagramChannel;

abstract class UDPAbstractBootstrap extends AbstractBootstrap {

	private static final Logger LOGGER = LoggerFactory.getLogger(UDPAbstractBootstrap.class);

	private final KernelBootstrapProvider kernelBootstrapProvider;

	private final UDPKernelBootstrapProvider udpKernelBootstrapProvider;

	@Override
	public final KernelBootstrapProvider KernelProvider() {
		return kernelBootstrapProvider;
	}

	public final UDPKernelBootstrapProvider UdpProvider() {
		return udpKernelBootstrapProvider;
	}

    UDPAbstractBootstrap(AioConfig config,
						 UDPKernelBootstrapProvider udpKernelBootstrapProvider,
						 KernelBootstrapProvider kernelBootstrapProvider) {
		super(config);
		this.udpKernelBootstrapProvider = udpKernelBootstrapProvider;
		this.kernelBootstrapProvider = kernelBootstrapProvider;
        config.setHandler(config.getPlugins());
	}

    /**
     * 开启一个UDP通道，端口号随机
     *
     * @return UDP通道
     * @throws IOException 开启异常
     */
    public void open() throws IOException {
//        return open(0);
    }

    /**
     * 开启一个UDP通道
     *
     * @param port 指定绑定端口号,为0则随机指定
     * @return     UDPChannel通道
     * @throws IOException 开启异常
     */
    public void open(int port) throws IOException {
//        return open(null, port);
    }

    /**
     * 开启一个UDP通道
     *
     * @param host 绑定本机地址
     * @param port 指定绑定端口号,为0则随机指定
     * @return      UDPChannel通道
     * @throws IOException 开启异常
     */
    public void open(String host, int port) throws IOException {

//    	beforeStart();

        DatagramChannel channel = DatagramChannel.open();
        channel.configureBlocking(false);
        if (port > 0) {
            InetSocketAddress inetSocketAddress = host == null ? new InetSocketAddress(port) : new InetSocketAddress(host, port);
            channel.socket().bind(inetSocketAddress);
        }
        if (LOGGER.isInfoEnabled()) {
			if (port > 0) {
				LOGGER.info("The UDP service was successfully started with port number:" + port);
			} else {
				LOGGER.info("The UDP service was successfully started, and the port number was randomly generated by the system");
			}
		}
//        return new UDPChannel(channel, worker, config, bufferPool.allocateMemoryBlock());
//		return null;
    }

    /**
     * 关闭UDP服务
     */
    public void shutdown() {
        if (LOGGER.isInfoEnabled()) {
        	LOGGER.info("The UDP service successfully exited");
		}
    }

    protected NioEventLoopWorker getNioEventLoopWorker() {
    	return null;
	}
}
